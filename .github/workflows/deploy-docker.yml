name: "Déploiement Docker du compose"
on:
  push:
    branches:
      - 'production' # Le workflow se déclenche pour les push sur la branche "production"
  workflow_dispatch:
    # Permet de lancer manuellement le workflow avec une branche spécifique

jobs:
  deploy:
    name: Déploiement Docker sur le serveur
    runs-on: ubuntu-latest

    steps:
      - name: Récupérer le code source
        uses: actions/checkout@v3

      - name: Configurer la clé SSH
        # Crée un fichier contenant la clé privée pour accéder au serveur distant
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Copier les fichiers nécessaires vers le serveur
        # Transfère les fichiers requis pour le déploiement vers le serveur distant
        # et utilise la clé privée ssh pour se connecter
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            docker-compose.yml \
            nginx.conf \
            ${{ vars.SSH_USER }}@${{ vars.SSH_SERVER }}:/var/www/docker-stockage-fichiers

      - name: Nettoyer, arrêter et redémarrer les conteneurs sur le serveur distant
        # Arrête les conteneurs existants, nettoie les ressources inutilisées et redémarre les conteneurs à partir du docker-compose.yml.
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ vars.SSH_USER }}@${{ vars.SSH_SERVER }} << EOF
            set -e
            # Passage en root et exécution des commandes
            sudo bash -c "
              cd /var/www/docker-stockage-fichiers &&
              
              # Arrêter les conteneurs en cours
              docker compose down || true &&
              
              # Nettoyer les conteneurs et images inutilisés, sans affecter les volumes
              docker container prune --force &&
              docker image prune --all --force &&
              
              # Redémarrer les conteneurs
              docker compose up -d
            "
          EOF

      - name: Nettoyer les fichiers temporaires
        # Supprime la clé privée temporaire locale pour des raisons de sécurité
        if: always()
        run: rm -f private_key.pem